维基百科-Class 文件结构
https://en.wikipedia.org/wiki/Java_class_file

一、魔数
大小：4个字节
都是CAFEBABY~

二、版本号
大小：4个字节




也就是魔数后面4个字节就是版本号

版本号的作用：JVM 运行class文件的时候判断是否可以运行这个版本的程序
记得只能向下兼容，不能向上兼容。
也就是如果一开始JVM 识别到版本号是比当前Java 的版本号高的话，直接就不会运行。

三、常量
常量主要知道两点：
1、常量的数量表达比较特殊：是从1开始计数的。

2、常量的结构
U1：常量类型，比如整形、UTF8_info 类型等
Un：常量的长度（UTF8_info 只有2个字节表达，所以java 的方法长度最大是65535）
Ulength：常量内容

3、自己编译测试

四、访问标志
常量池结束之后会有一个u2类型的字段，记录了类的访问类型是哪种。

五、类索引、父类索引和接口索引
详细说明：https://blog.csdn.net/luanlouis/article/details/41039269
体会：
1、要学会使用javap工具来查看类的结构
其实这三个索引所对应的都是表示类信息常量的具体地址

2、如果索引为0，比如接口索引为0，表示没有实现任何接口。这个也是常量池的大小是从1开始计算的原因

其实就是三个索引，每一个索引标注了表达信息的具体位置。


六、字段表组合
描述的是类的字段（变量），带有类的字段的以下信息：
访问类型 + 名称index（应该是链接到常量池的地方） + 参数/返回值列表
参数、返回值的表达都是用简单的字母表示的。

七、方法表组合
描述类的方法，带上方法的访问类型、名称、参数和返回值等相关信息。
和字段表的格式类似，要表示的字段不同（变量和方法）
相同点：都有属性表。

八、属性表
这个是class内容里面最具有扩展性的一部分。

1、code
方法展示，这里依然要使用javap方法比较能够看出方法含义
比如：


注意args_size 这个表示参数数量，只要不是静态方法，默认都是1

2、异常

3、linenumbertable属性
非必须属性
显示java源代码的行数和class文件中字节码的偏移量对应的关系
所以这个的作用是在程序报错时显示堆栈信息。

4、localvariabletable
非必须属性
显示所有局部变量的信息

5、SourceFile
非必须属性
源码文件名称

6、innerClasses
标识内部类的属性

7、Deprecated和Synthetic
Deprecated：已经废弃
Synthetic：编译器启动编译产生

8、stackmaptable
字节码验证器

9、signature
在泛型场景有用到。
目前猜测是在泛型的时候需要标注变量类型用的？

10、BoottrapMethods
一个特殊的类型，不需要关注。

问题
问题①  为什么魔数需要4个字节来表达？版本会变得很高吗？
其实前两位是次版本号，后两位是主版本号
比如：00 03 00 2D 这个的主版本号是45，次版本号是3，所以合起来版本号就是45.3
对应JDK 版本：1.1.8

问题② hexdump每一行后面显示的是什么？

问题③ 为什么仅有常量池的技术是从1 开始的？
https://stackoverflow.com/questions/23674727/jvm-class-format-why-is-constant-pool-count-one-larger-than-it-should-be
其中一种解释是 常量的大小，这个本身就占常量的空间。。。

问题④ 常量池前面几个标志不知道是什么意思？

问题⑤ 类索引、父类索引和接口索引的作用

问题⑥ 有类的访问类型，那么常量的访问类型如何表示？
---> 后面会看到

问题⑦ 类的访问标志有哪些，具体有什么作用？
感悟：现在知道为什么每一种接口、每一种枚举要单独编译出一个class文件了。

其他零碎：
1、查看二进制文件的方法
linux：
hexdump -C Greeting.class

或者使用 subline 来查看

2、更明显的格式查看常量表
javap -verbose Test.class




