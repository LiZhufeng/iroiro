一、架构 - 服务设计
Hystrix 的替代产品
主要实现熔断、流量控制


二、java8 -- 今日完成
目标：整理流的所有用法

后续：对所有场景进行扩展

三、cookie -- 完成
1、cookie的一些防劫持策略
---> 主要的三个安全属性：httponly、secure（是否只能用https访问）、path

2、Google chrome 的密码是保存在哪里的？如何保证是否安全？
https://superuser.com/questions/718383/where-are-google-chrome-passwords-stored-in-windows
https://www.cnblogs.com/pshell/p/8367581.html

结论：chrome 保存用户的密码是通过windows 提供的api：CryptProtectData来加密的，在同一台机器上，可以通过软件ChromePasswordDump 来解密，所以其实不是特别安全。

扩展问题：那么在终端上这个密码是如何保存，如何同步的？

四、数据库 -- 后续研究
1、加字段是否会加锁？
当前问题：为什么加字段会对所有的查询操作都阻塞？？
--> 有可能是事务隔离级别引起的，需要将查询相关的会话设置成READ REPEATABLE才行--> 测试发现不行，应该是在DDL操作的时候都不建议再进行select * 的操作（本身也可以将它理解为是DDL的操作），不按照索引进行的查询都会有问题！

问题：锁表的时候，只有innodb_trx 表才有数据，innodb_locks和innodb_lock_waits 都没有（所以没有阻塞？？）
---> 但是还是足够查找阻塞的两个语句了：Waiting for table metadata lock ，这个是5.5.3 版本之后引入的：用来隔离多个DDL操作的。
可以通过innodb_trx 先找到阻塞的语句，然后通过 show processList 找到进程id。

扩展博客：
https://dev.mysql.com/doc/refman/8.0/en/alter-table-generated-columns.html
https://dev.mysql.com/doc/refman/8.0/en/metadata-locking.html

扩展问题：
① metadata lock 也是先占用的先拿到锁，为什么会相互阻塞呢？
参考博客：
https://www.cnblogs.com/ivictor/p/9459265.html
http://mysql.taobao.org/monthly/2015/11/04/
https://www.cnblogs.com/cchust/p/4303929.html

后续研究：应该是这样：两个操作都在一开始的时候会先占用SHARED_LOCK，然后在最后一步操作的时候（比如select * 需要返回，alter table 需要修改表的名字），都需要进行锁升级或者是锁检测，最终导致死锁。

分析过程：先看select 加锁过程
https://www.cnblogs.com/rjzheng/p/9950951.html

然后看MDL的原理
http://mysql.taobao.org/monthly/2015/11/04/

整理-锁专题

② 意向锁是否还有作用？ --- 在DML 和DDL 操作之间还是有用的。Metadata lock 是在两个DDL操作之间用额的

2、select 对不同事务隔离级别的加锁机制

五、扩展问题
1、数据库本身实现的乐观锁

2、JVM如何判断一个class 已经被加载过？ 内存中的map？

3、数据库的快照机制：什么时候会用快照？如果查很多数据还会用快照么

4、数据库：怎么样根据业务来决定到底需要什么样的事务隔离级别？
---> 需要经常根据时间查询的话，应该不需要，加了反而效率更低

@iVictor
比如现在有一个学生表Student，里面有很多学生数据，基本字段是name；classid 等等。
然后我在session1 中执行 alter student add id bigint; 
在session2 中执行 select (星号) from student; 注意不加任何过滤条件。

然后这两个SQL就都卡住了，show processlist 里面能看到，都是在 Waiting for table metadata lock。

你看下这个过程完整不？

5、关于类加载：Class.getClassLoader 返回的是什么？它和上下文类加载器有什么区别？？

6、通过idea 实现热部署的原理 - 命名空间

7、JSON 去读取对象和序列化成具体对象相比，哪种方式更优？
---> 应该后者更优，通过json 读取的话每次都会调用hashcode 方法，并且要从底层树形结构获取数据

8、双亲委派的含义，以及如何破坏双亲委派

9、invoke 方法的原理？

