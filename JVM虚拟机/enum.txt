参考博客
www.hollischuang.com/archives/2498
www.hollischuang.com/archives/1144
www.hollischuang.com/archives/197

来源：单例模式-枚举单例模式和静态单例模式 有什么不同？
结论：首先共同点就是两者都是线程安全的，不同点就是反序列化的时候，Enum 天生支持单例模式，但是静态单例模式不支持。
就好像搬家的时候，你是跟着 行李一起搬，还是只是列一个清单，标注要搬哪些行李。

一、传统单例模式


每次获取单例都要进行加锁和释放锁的过程

二、使用Enum的单例模式
实现方式：


好处有两个：
1、Enum 天生的线程安全

问题1 为什么使用ClassLoader 机制加载就是线程安全的呢？
---> 类在初始化的时候，单例就已经被加载了

2、反序列化依然可以保证单例，不会被类加载器重新加载
原因解释：
1）普通类反序列化的逻辑：
通过名字查找到类 --> 类本身是否实现了readResolve方法？ ---> 如果没有，则直接调用类的空参数构造方法 ---> 有则调用readResolve 方法

因此默认的类也不是不能实现安全的单例，只不过还需要重载readResolve 方法。

2）Enum的反序列化逻辑
从 JVM中保存的一份队列(enumConstantDirectory) ---> 通过valueOf 方法，判断当前类是否在JVM--Enum类队列中存在 ---> 如果存在，直接从队列中取出该类的实例

因此Enum 类天生就是支持单例的。 Java虚拟机已经做了限制，Enum 类只会保存一个对象。
