一、对流的基本理解
流主要是针对数组操作这样的行为来实现的对象

流和集合的区别：示例：学校的洗手间洗手，要么直接开水龙头，要么把水接到桶里面再洗。

二、流的基本操作
1、中间操作：比如水的过滤，返回的还是水

2、终端操作：返回非流对象

三、使用流
1）筛选和映射
1、对数组的基本操作
场景：全员做广播体操，筛选出一年级的前10个学生上台带大家做。（filter、limit）

2、将一个英文单词数组中的所有字符组成一个数组，需要去重（map、flatMap、distinct）

问题① 如何理解map 和 flatMap 的区别?
map：将数组中所有元素都合并成一个流。
flatMap：数组中的每一个元素都拆分成单独的流，这样对每一个元素又可以进行一些处理。
（详见ReferencePipeLine.flatMap：将每一个元素都拆分，然后用串行流来进行处理）

2）查询
1、查找当前学生队列中，是否存在小明？（anyMatch/allMatch/noneMatch）

2、选代表：随机从本次考试分数为100分的同学中，选出一个上台发言（filter+findAny）

问题② 默认情况下，Optional 会返回什么？
---> Optional.EMPTY（注意toString 之后会返回Optional.empty，在序列化传输的时候还是要注意）

问题③ findAny 和 findFirst 有什么区别？


组成流的方式不太一样，总之如果是设置了要取第一个元素，那么流在组成的时候一定会进行一定的封装，比如会排序什么的。

3）合并
1、所有同学的分数之和（reduce）
这里有一个地方要注意一下：因为reduce 的返回值定义是和流的元素类型一样的，所以这里只能先把流取出来，再进行求和
        int sum = studentArr.stream().reduce(0, (a, b) -> a.getGrade() + b.getGrade());

        int gradeSum = studentArr.stream().map(Student::getGrade).reduce(0, (a, b) -> a + b);

2、取出最高的分数（reduce、MAX）

场景：查出分数最高的同学 -- 


问题：流是否是有状态的？

问题：多线程操作流会不会有问题？

问题：Collectors 方法：Function<A,R> finisher 是什么意思？

4）流的装箱
1、依然是获取最大的分数值
        OptionalInt optionalMaxGrade = studentArr.stream().mapToInt(Student::getGrade).max();
        System.out.println("所有同学中最大的分数为: " + optionalMaxGrade.orElse(0));

5）生成流
1、生成所有的勾股数（boxed、range/rangeClosed、flatMap）
详见例子

6）构建流
1、生成斐波那契数列（Stream.iterator、Stream.generate）


当前问题：Stream.iterate和Stream.generate有什么区别？
---> iterator主要是对当前元素进行的变换，而generate 更加灵活：可以定义一个类，对流的数值一直定义下去。
从效率上来看，应该generate 的效率更加高一些
因为iterator 接收：UnaryOperator，返回值是void 类型的，下一个元素的变换只能够基于当前元素来变换（所以如果变换比较简单还好）；但是generate 返回值是Supplier 类型，可以自定义返回值，计算方式也更加灵活，流的类型也不需要变换（IntStream）。


7）收集器
问题：收集器实现和通过Stream的装箱方法实现的获取最值有什么区别？
--> 其实区别不大，因为Collectors 的底层，比如max方法也是通过reduce(Integer::max)方法来实现的
但是reducing 这块就有点不一样了：Stream 的reduce 方法，限制了reduce 返回的对象必须和流的对象类型一样，而且不能对对象再转换。但是reducing 可以，因此可以用reducing 来计算总数。


扩展问题：Reducing和Reduce 的区别？
后续补充，现在暂时只知道返回值相关的问题
① 支持改变返回值

② 支持流的并行处理
场景示例：collect(Collectors.toList)方法，如果只是用reduce 来实现的话，需要设置两种组合方式：List 和 Integer的组合、List 和 List 的组合，而List方法不是线程安全的，所以并行情况下会有问题。

（为什么Collectors.toList 可以保证线程安全？）


扩展问题：求和有三种方式，哪种更优？
Reduce(0, ..)
Collectors.reducing(0, …)
intStream
Collectors.summingInt

课本：intStream 更优，因为它可以避免整数的拆箱和装箱操作。
因此解决一个问题，优先考虑：
整型流 > Collectors 自带方法 > reducing > reduce

8）分组
一般使用场景比较少？
在处理一些kafka 消息的时候，可以通过某些字段来划分优先级。

问题：分组和分区有什么区别？
分区需要一个返回值是boolean 的方法

回顾和总结：如何设计一个效率比较高的Collector?


三、并行流
引入问题：并行流在什么场景下可用？什么场景下不能用
1、归纳：适用于并行流的场景：
整型流
ArrayList
findAny

2、场景：实现
使用ForkJoin 框架实现班级所有同学的分数求和 -- 完成

3、场景：实现
使用Spliter实现对一个字符串中所有单词的计算
https://blog.csdn.net/qq_35864642/article/details/78204836

问题：需要搞懂以下方法的作用：
Accumulate
Combine

Spliterator 的几个方法

问题：ForkJoin 和 Spliterator框架的不同
其实从实现上来说这两个都可以实现任务拆分+结果合并的场景。
一般来说Spliterator 都是底层已经实现好的，在使用并行流的时候底层会自动帮我们拆解好。
可参考Spliterators.java 里面的实现


扩展：文件流
读文件只要一行代码：
Files.lines(Paths.get("LambdaTest.java"), StandardCharsets.UTF_8).forEach(System.out::println);

写文件：Files.write
