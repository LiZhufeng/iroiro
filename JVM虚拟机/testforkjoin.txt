@AllArgsConstructor
public class MyForkJoinTask extends RecursiveTask<Integer> {

    private Student[] students;

    private int start;

    private int end;

    public static void main(String[] args) {
        Student xiaoming = new Student("xiaoming", 87);
        Student xiaohong = new Student("xiaohong", 90);
        Student xiaoqiang = new Student("xiaoqiang", 100);
        Student xiaofeng = new Student("xiaofeng", 100);

        Student[] students = new Student[]{xiaoming, xiaohong, xiaoqiang, xiaofeng};
        MyForkJoinTask myForkJoinTask = new MyForkJoinTask(students, 0, students.length - 1);
        int sumOfGrade = new ForkJoinPool().invoke(myForkJoinTask);
        System.out.println("学生的总成绩为：" + sumOfGrade);
    }

    @Override
    protected Integer compute() {
        // 判断终止条件
        if (start + 1 >= end) {
            return students[start].getGrade() + students[end].getGrade();
        }

        // 拆分任务
        int mid = (start + end) / 2;
        MyForkJoinTask leftTask = new MyForkJoinTask(students, start, mid);
        leftTask.fork();
        MyForkJoinTask rightTask = new MyForkJoinTask(students, mid + 1, end);

        int leftTaskResult = leftTask.join();
        int rightTaskResult = rightTask.compute();

        // 完成：返回求和的结果
        return leftTaskResult + rightTaskResult;
    }
}

public class MySplitter implements Spliterator<Character> {

    private String currentStr;
    private int currentPos;

    public MySplitter(String str) {
        currentStr = str;
        currentPos = 0;
    }

    // 对分区后的字符串进行单词数量的计算
    @Override
    public boolean tryAdvance(Consumer<? super Character> action) {
        action.accept(currentStr.charAt(currentPos++));
        return currentPos < currentStr.length();
    }

    // 拆分。基本算法：对半拆分
    @Override
    public Spliterator<Character> trySplit() {
        int currentSize = currentStr.length() - currentPos;
        if (currentSize <= 4) {
            return null;
        }
        // 将右边的部分拆分出去
        for (int splitPos = currentSize / 2 + currentPos; splitPos < currentStr.length(); splitPos++) {
            if (Character.isWhitespace(currentStr.charAt(splitPos))) {
                MySplitter newSplitter = new MySplitter(currentStr.substring(currentPos, splitPos));
                currentPos = splitPos;
                return newSplitter;
            }
        }
        return null;
    }

    // 返回当前分解器需要处理的子元素大小，不会对最后计算的正确性产生影响
    @Override
    public long estimateSize() {
        return currentStr.length() - currentPos;
    }

    @Override
    public int characteristics() {
        return ORDERED + SIZED + SUBSIZED + NONNULL + IMMUTABLE;
    }

    public static void main(String[] args) {
        MySplitter splitter = new MySplitter("This is my word");
        Stream<Character> stream = StreamSupport.stream(splitter, true);
        MyWordCalculator wordCalculator = stream.reduce(new MyWordCalculator(0, true), MyWordCalculator::calculate, MyWordCalculator::combine);
        System.out.println("统计出来的单词总数为：" + wordCalculator.getCounter());
    }
}

@AllArgsConstructor
@Data
public class MyWordCalculator {

    private int counter = 0;
    private boolean currentIsBlank = true;

    // tryAdvance 会调用的“下一步”计算方法
    // 可参考for 循环的实现方式
    public MyWordCalculator calculate(Character c) {
        if (Character.isWhitespace(c)) {
            return currentIsBlank ? this : new MyWordCalculator(counter, true);
        }
        else {
            return currentIsBlank ? new MyWordCalculator(counter + 1, false) : this;
        }
    }

    // 合并两个计数器，这里“是否是空格”参数应该返回什么都没关系
    public MyWordCalculator combine(MyWordCalculator anoWordCalculator) {
        return new MyWordCalculator(this.counter + anoWordCalculator.counter, anoWordCalculator.currentIsBlank);
    }

}
