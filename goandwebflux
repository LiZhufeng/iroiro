package main

import (
	"fmt"
	"strings"
)

type Teacher struct {
	id string
	name string
	subject string
}

// 测试：设计一个方法，输入一串字符串，输出字符串中的每一个单词出现的次数
func getWordAndTimes(article string) map[string]int {
	wordCountMap := make(map[string]int)
	wordArr := strings.Fields(article)
	for _, word := range wordArr {
		wordCountMap[word] = wordCountMap[word] + 1
	}
	return wordCountMap
}

// 测试：闭包功能，设计斐波那契数列
// 0 1 1 2 3 5 8 13 21
func fabonacciFunc() func() int {
	// 这里定义的其实是初始值
	lastlastNum, lastNum := 0, 1
	return func() int {
		currentNum := lastlastNum
		lastlastNum = lastNum
		lastNum = currentNum + lastNum
		return currentNum
	}
}

func main() {
	mathTeacher := Teacher{"123", "Mr.Liang", "Math"}

	mymap := make(map[string]Teacher)

	mymap["math"] = mathTeacher

	// 遍历map
	fmt.Println("开始遍历动态map！")
	for key, value := range mymap {
		fmt.Printf("当前元素的key 为: %s，值为: %v\n", key, value)
	}

	// 声明的时候直接初始化map
	fmt.Println("开始遍历初始化map！")
	myInitMap := map[string]Teacher{
		"chinese": {"1", "Mrs.zhang", "chinese"},
		"english": {"2", "Mr.huang", "english"},
	}
	for key, value := range myInitMap {
		fmt.Printf("当前元素的key 为: %s，值为: %v\n", key, value)
	}

	// 删除元素，并确认
	delete(myInitMap, "chinese")
	chineseTeacher, hasChineseTeacher := myInitMap["chinese"]
	fmt.Printf("当前语文老师是否存在: %t, 值为: %v\n", hasChineseTeacher, chineseTeacher)

	// 测试获取一篇文章当中所有单词出现的次数
	wordCountMap := getWordAndTimes("This is my hello world go project!!!")
	fmt.Println("输出单词和出现次数的统计信息: ")
	for key, value := range wordCountMap {
		fmt.Printf("当前元素的key 为: %s，值为: %v\n", key, value)
	}

	// 测试闭包编写斐波那契数列
	funcOfFab := fabonacciFunc()
	for index := 0; index < 10; index++ {
		fmt.Printf("当前第%d个斐波那契数为: %d\n", index + 1, funcOfFab())
	}

	// 下一次看到：方法 https://tour.golang.org/methods/1
}

package hello;

import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Stream;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@RestController
public class GreetingController {

    private static final String template = "Hello, %s!";
    private final AtomicLong counter = new AtomicLong();

    @RequestMapping("/greeting")
    public Greeting greeting(@RequestParam(value="name", defaultValue="World") String name) {
        return new Greeting(counter.incrementAndGet(),
                            String.format(template, name));
    }

    // 第一个测试程序
    @RequestMapping("query")
    public Mono<String> getStudent(@RequestParam(name = "id")String id) {
        return Mono.fromCallable(() -> {
            return "测试";
        });
    }

    // 测试用flux
    @RequestMapping("get")
    public Flux<String> getFluxObject() {
        return Flux.fromStream(Stream.of("123", "456"));
    }

    @RequestMapping("block")
    public Mono<String> testBlock() {
        return Mono.fromCallable(() -> {
            System.out.println("当前线程名称: " + Thread.currentThread().getName());
            Thread.sleep(100000);
            return "成功";
        });
    }

    // 测试通过异步返回response
    // 这个方法没测试成功，后续验证，一般情况下使用上面的代码足够了
//    public Mono<ServerResponse> getStudentList() {
//        Mono<ServerResponse> notFound = ServerResponse.notFound().build();
//        Mono<String> studentsMono = Mono.fromCallable(() -> {
//           return "哈哈哈";
//        });
//        return studentsMono
//                .then(person -> ServerResponse.ok().contentType(APPLICATION_JSON).body(fromObject(person)))
//                .defaultIfEmpty(notFound);
//    }

}

// 测试方法my_first_test.go
package test

import "testing"

func TestPrint(t *testing.T) {
	structArr := []struct{
		name string
		age int
	}{
		{"xiaoming", 10},
		{"xiaohong", 9},
	}

	for _, student := range structArr {
		t.Logf("当前学生的名字为: %s, 年龄为: %d\n", student.name, student.age)
	}
}

