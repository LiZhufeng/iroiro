一、线程中断
1、使用线程的interrupt方法中断线程
在生产者-消费者模式下，生产者是绝对不允许出现阻塞的，否则会出现整个消息队列阻塞的问题。
如果仅仅是使用标志位，来判断任务是否可以中断，容易导致生产者方法内部出现错误的时候，线程无法中断。

为了避免这种情况出现，一种简单的方法，就是通过interrupt方法，来设置线程的中断状态。
一旦设置了这个中断状态，线程再次进入到中断方法的时候，就会抛出InterruptException，告知这个线程应该要结束了。

下面是比较完善的线程处理异常的方式：



首先，线程进入阻塞方法之前，会先判断这个线程是否已经进入中断状态，如果是的话，将会直接退出。防止已经处于阻塞状态的线程又再次进入到这个阻塞方法。
其次，对本身的阻塞方法put也加入了try…catch，这个是保证阻塞方法put在执行的过程中被中断了，线程能够结束。

这两步，保证了线程一定能够中断成功。

问题：什么情况下会抛出InterruptException？
---> 阻塞方法（队列的put也是），中间出现中断状态的时候，会抛出这个异常

2、中断策略
线程在接收到中断信息的时候可以有不同的处理方式：
一种是抛出异常信息，还有一种是继续执行。
不管是哪种，最好的方式还是抛出InterruptException，让外部线程决定应该怎么处理。

3、定时中断
一种实现方式是在线程一开始执行的时候，启动一个定时线程，专门执行interrupt方法。
但是有一个问题：这种就写死了，过了那一段时间一定会发生中断，无法控制。
如果在中断时间之前完成了，那么可能会导致未知的后果。

更好的方法：通过Future 实现取消
